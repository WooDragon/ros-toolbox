name: Generate RouterOS Static Routes Script

on:
  schedule:
    - cron: '0 0 * * *'   # 每天 UTC 0 点运行
  workflow_dispatch:      # 手动触发

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Generate RouterOS rsc file
        run: |
          set -e
          base_url="https://gaoyifan.github.io/china-operator-ip"
          output_file="static_routes.rsc"
          echo "# Generated RouterOS static routes" > $output_file
          echo "# Generated on $(date)" >> $output_file
          echo "" >> $output_file

          declare -A file_gateway_map=(
            ["cmcc.txt"]="pppoe-cmn1 pppoe-cmn2 pppoe-cmn5 pppoe-cmn6 pppoe-cmn7"
            ["chinanet.txt"]="pppoe-ctn1 pppoe-ctn5"
            ["china.txt"]="pppoe-ctn1 pppoe-ctn5 pppoe-cmn1 pppoe-cmn2 pppoe-cmn5 pppoe-cmn6 pppoe-cmn7"
          )
          ipv4_files=("cmcc.txt" "chinanet.txt" "china.txt")

          declare -A file_gateway_map6=(
            ["cmcc6.txt"]="pppoe-cmn1 pppoe-cmn2 pppoe-cmn5 pppoe-cmn6 pppoe-cmn7"
            ["chinanet6.txt"]="pppoe-ctn1 pppoe-ctn5"
            ["china6.txt"]="pppoe-ctn1 pppoe-ctn5 pppoe-cmn1 pppoe-cmn2 pppoe-cmn5 pppoe-cmn6 pppoe-cmn7"
          )
          ipv6_files=("cmcc6.txt" "chinanet6.txt" "china6.txt")

          declare -A seen_ipv4
          declare -A seen_ipv6

          process_file() {
            local file=$1
            local gateways="$2"
            local is_ipv6=$3
            local cmd_prefix="/ip route add"
            if [ "$is_ipv6" -eq 1 ]; then
              cmd_prefix="/ipv6 route add"
            fi
            echo "Downloading ${file}..."
            curl -s "${base_url}/${file}" -o "${file}"
            if [ ! -s "${file}" ]; then
              echo "Error: File ${file} is empty or failed to download" >&2
              exit 1
            fi
            while IFS= read -r line; do
              trimmed=$(echo "$line" | xargs)
              if [ -z "$trimmed" ] || [[ $trimmed == \#* ]]; then
                continue
              fi
              if [ "$is_ipv6" -eq 1 ]; then
                if [ -n "${seen_ipv6[$trimmed]}" ]; then
                  continue
                fi
                seen_ipv6["$trimmed"]=1
              else
                if [ -n "${seen_ipv4[$trimmed]}" ]; then
                  continue
                fi
                seen_ipv4["$trimmed"]=1
              fi
              for gw in $gateways; do
                echo "${cmd_prefix} disabled=no distance=11 dst-address=${trimmed} gateway=${gw} routing-table=main suppress-hw-offload=no" >> $output_file
              done
            done < "${file}"
          }

          for file in "${ipv4_files[@]}"; do
            process_file "$file" "${file_gateway_map[$file]}" 0
          done

          for file in "${ipv6_files[@]}"; do
            process_file "$file" "${file_gateway_map6[$file]}" 1
          done

          echo "RouterOS rsc file generated: ${output_file}"

      - name: Delete existing 'latest' release and tag (if exists)
        run: |
          gh release delete latest --yes || true
          git tag -d latest || true
          git push origin --delete latest || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push new 'latest' tag
        run: |
          git tag latest
          git push origin latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release with 'latest' tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: "Latest RouterOS Static Routes"
          files: static_routes.rsc
          body: "Automatically generated RouterOS static routes script."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
